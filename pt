#!/usr/bin/env rakudo


use lib 'lib';
use lib '.';
use plot;
use util;
use Conf;

sub MAIN($dirs, $op, $arg_3 = 'arg_3', $arg_4 = 'arg_4', $arg_5 = 'arg_5') 
{
    my @disks;
    @disks = parse_comma($dirs);
    my $conf = Conf.new;

    if ($op ~~ 'clean') {
        clean(@disks);
    } 
    if ($op ~~ 'count') {
        my $cnt = 0;
        if (@*ARGS.elems == 2) {
	    my $plot = count(@disks, 'plot');
	    say @disks.elems  ~ " disks, total : $plot plots\n";
	    my $spt = count(@disks, 'spt');
	    say @disks.elems  ~ " disks, total : $spt spt\n";
	    my $fpt = count(@disks, 'fpt');
	    say @disks.elems  ~ " disks, total : $fpt fpt\n";
	}
	if (@*ARGS.elems == 3) {
	    my $ft = $arg_3;
	    if ($arg_3 ~~ 'plot') {
		$cnt = count(@disks, 'plot');
		say @disks.elems  ~ " disks, total $arg_3: $cnt ";
	    }
	    if ($arg_3 ~~ 'spt') {
		$cnt = count(@disks, 'spt');      
		say @disks.elems  ~ " disks, total $arg_3: $cnt ";
	    }
	    if ($arg_3 ~~ 'fpt') {
		$cnt = count(@disks, 'fpt');
		say @disks.elems  ~ " disks, total $arg_3: $cnt ";
	    }
	    if ($arg_3 ~~ 'disk') {
		say "$dirs is total " ~ @disks.elems ~ " disks\n";
	    }

	}
    } 
    if ($op ~~ 'rmsys') {
        rmsys(@disks);
    }
    if ($op ~~ 'rm') {
        my $n;
        if  (@*ARGS.elems != 3) {
	    $n = 2;
        } else {
            $n = $arg_3;
        }
        say "args: " ~ @*ARGS.elems;
        say "n:  " ~ $n;
	
        rm(@disks,$n);
    }
    if ($op ~~ 'test') {
	if (@*ARGS.elems == 3) {
	    test(@disks, $arg_3)
	} elsif (@*ARGS.elems == 4) {
	    test(@disks, $arg_3, $arg_4);
	} else {
	    test(@disks);
	}
    }
    
    my $fs = 'xfs';
    if ($op ~~ 'stop') {
	for @disks -> $d {
	    qqx/tmux kill-session -t $d /;
	}
    }
    if ($op ~~ 'add') {
	if ($arg_3 ~~ 'mmx') {
	    for @disks -> $d {
		my $t = '/sd' ~ $d ~ '/' ~ 'plots';
		put "plots dir: $t";
		if (@*ARGS.elems >= 4) {
		    $t = '/' ~ $arg_4 ~ '/sd' ~ $d ~ '/' ~ 'plots';
		    say $t;
		}
		qqx/chia.bin plots add -d $t/;
	    }
	} else {
	    for @disks -> $d {
		my $t = '/sd' ~ $d ~ '/' ~ 'plots';
		put "plots dir: $t";
		qqx/chia plots add -d $t/;
	    }
	}
    }
    if ($op ~~ 'mount') {
	if ( @*ARGS.elems >= 3) {
	    for @disks -> $d {
		say $d;
		$fs = $arg_3;
		if ($fs ~~ 'nfs') {
		    my $hostip   = $arg_4;
		    my $hostname = $arg_5;
		    say "$hostip. $hostname, $d";
		    mount_nfs($d, $fs, $hostip, $hostname);
		} else {
		    mount($d, $fs);
		}
	    }
	} else {
	    for @disks -> $d {
		mount($d, $fs);
	    }
	}	   
    }
    if ($op ~~ 'umount') {
	for @disks -> $d {
	    umount($d);
	}
    }
    if ($op ~~ 'format') {
	for @disks -> $d {
	    if (@*ARGS.elems == 3) {
		$fs = $arg_3;
	    }
	    format($d, $fs);
	}
    }
    if ($op ~~ 'nfs') {
	my $nfs_conf = "/etc/exports";
	for @disks -> $d {
	    my $ed = "/sd" ~ $d ~ " *(rw,async,no_subtree_check,no_root_squash)\n";
	    my $nfs_op = $arg_3;
	    spurt $nfs_conf, $ed, :append;
	}
	qqx/service  nfs-server restart/;
    }
    if ($op ~~ 'copy') {
	for @disks -> $d {
	    my $sname = $op ~ '_' ~ $d;
	    qqx/tmux new -s $sname -d rakudo mmx_copy.raku $d/;
	}
    }
    if ($op ~~ 'write') {
	my $sname = $op ~ '_' ~ $dirs;
	qqx/tmux new -s $sname -d rakudo mmx_write.raku $dirs/;
    }
    if ($op ~~ 'log') {
	my $cnt = 10;
	if (@*ARGS.elems == 3) {
	    $cnt = $arg_3;
	}
	for @disks -> $h {
	    my $xchlog = "/home/$h/.chia/mainnet/log/debug.log";
	    say "========$h start============";
	    say qqx/ssh $h@$h tail -n $cnt $xchlog/;
	}
    }
    if ($op ~~ 'stat') {
	for @disks -> $h {
	    if (@*ARGS.elems == 3) {
		say "========$h start============";
		say qqx/ssh $h@$h $arg_3/;
	    } else {
		say "========$h start============";
		say qqx/ssh $h@$h df -h/;
	    }
	}
    }
    if ($op ~~ 'scp') {
	for @disks -> $h {
	    say "========$h start============";
	    qqx/scp -r $arg_3 $h@$h:~\//;
	}
    }
    if ($op ~~ 'sid') {
        my @plots=("plots");
        if (@*ARGS.elems == 3) {
            @plots = parse_comma($arg_3);
        }
        for @disks -> $d {
            for @plots -> $p {
                my $smh_data_dir          = $conf.mount_prefix ~ "/sd" ~ $d ~ "/" ~ $p;
                my $postdata_metadata  = $smh_data_dir ~ '/postdata_metadata.json';
                my $keybin  = $smh_data_dir ~ '/key.bin';
                my $k = qqx/cat $keybin/;
                say $keybin;
                say $k;
            }
        }
    }
    if ($op ~~ 'veth') {
       say "adding veth";
       for @disks -> $e {
           say "veth: $e";
       	   qqx/sudo ip link add dev $e type veth/;
	   sleep(1);
       }
    }
    if ($op ~~ 'node') {
       my $num_nodes = 0;
       my $p1 = 'p1';
       my $p9 = 'p9';
       my @n;
       for  @disks -> $d {
       	   for $p1 ... $p9 -> $p {
	       my $node = '/sd' ~ $d ~ '/' ~ $p; 	       	   
	       my $data = '/sd' ~ $d ~ '/data' ~ '/data_' ~ $p;
	       if ($node.IO ~~ :e) {
	       	  $num_nodes++;
		  @n.push($p);
		  print qqx/du -sh $data/;
		  #qqx/rm -rf $data/;
	       }
	   }
       }
       say @n;
       say "num of nodes: $num_nodes";
    }
}
