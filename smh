#!/usr/bin/env rakudo

use lib 'lib';
use lib ".";
use Conf;
use plot;
use util;

sub MAIN($dirs, $gpus_or_plotdirs = "plots", $file_index_or_ip = 1)
{
    my $conf        = Conf.new;
    my @disks       = parse_comma($dirs);
    my $smh_op      = $conf.smh_op;
    my $num_of_disk = @disks.elems;

    my @plots        = parse_comma($gpus_or_plotdirs);
    my @gpus        = parse_comma($gpus_or_plotdirs);
    my $specified_of_gpu = @gpus.elems;

    my $num_of_gpu of Int  = (qqx/nvidia-smi -L | grep "GPU" | wc -l/).Int;

    my $num_of_task = 1;

    my @ips         = get_veth_ip();
    my $num_nodes   = 0;
    say "$smh_op mode";
    if ($smh_op ~~ "plot") {
       say " num_of_disk: $num_of_disk\n num_of_gpu: $num_of_gpu specified_of_gpu: $specified_of_gpu\n";
       if ($specified_of_gpu > $num_of_gpu) {
	   say "error, the max num of gpu: $num_of_gpu";
	   exit(1);
       }
    }

    while ($num_of_task--) {
	my $d = @disks.pop;
	say "disk: $d";
	
	my $root_path = $conf.smh_root_path;
	my $smh             = $root_path ~ "/go-spacemesh";
	my $plots_dir       = $conf.plots_dir;
	#my $smh_log_dir     = $conf.smh_root_path ~ '/data';
	my $smh_log_dir     = "/sd" ~ $d ~ '/data';

	my $smh_data_dir    = "/" ~ $conf.mount_prefix ~ "/sd" ~ $d ~ "/" ~ $plots_dir;
	my $smh_keybin      = $smh_data_dir ~ "/key.bin";
	my $smh_conf        = './node-config.json';
	my $smh_numunits    = $conf.smh_numunits;

	my $sname           = $d ~ '_' ~ $plots_dir;
	my $smh_coinbase    = $conf.smh_coinbase;

	my $smh_postcli     = $conf.smh_postcli;
	my $smh_lu          = $conf.smh_lu;
	my $smh_maxfilesize = $conf.smh_maxfilesize;

	#say $smh;
	#say "plots dir: $plots_dir";
	#say "data dir: $smh_data_dir";
	#say $smh_filelock;

	if ($smh_op ~~ "plot") {
	    my $smh_id;
	    say $smh_keybin;
	    if ($smh_keybin.IO ~~ :e) {
	       $smh_id           = $smh_keybin.IO.lines[0].substr(*-64);
	    } else {
	       my $tmp           = qqx/\~\/postcli\/postkey $smh_data_dir/;
	       $smh_id           = $tmp.lines[0];
	    }
            my $smh_commitid    = $smh_id;

	    #loop (my $g = 0; $g < $num_of_gpu; $g++) {
	    my $g_i = 0;
	    for @gpus -> $g {
		my $sum = 0;
		my $base_index = 0;
		if ($file_index_or_ip.contains('-')) {
      		    my $file_start = parse_start($file_index_or_ip);
      		    my $file_end   = parse_end($file_index_or_ip);
      		    my $file_range =  $file_end.Int - $file_start.Int;
      		    say "file_range : $file_range";
		    $sum = $file_range + 1;
		    $base_index = $file_start;
    		} else {
		   say "all file index";
		   $sum = $smh_numunits * 32;
		}

		my $r   = $sum mod $num_of_gpu;
		my $nu  = $sum div $num_of_gpu;
		if $r > 0 {
		    $nu = $nu + 1;
		}
		my $from = $g_i * $nu;
		my $to   = ($g_i + 1) * $nu - 1;
		if ($to+1) > $sum {
		    $to = $sum-1;
		}
		say "r : $r";
		say "nu: $nu";
		say "gpu number: $g";
		say "gpu index: $g_i";
		say "from: $from";
		say "to: $to";
		say "base_index: $base_index";

		$from += $base_index;
		$to   += $base_index;
		$g_i  += 1;
		
		say "qqx/tmux new -s $g -d $smh_postcli -provider $g -commitmentAtxId $smh_commitid -id $smh_id -labelsPerUnit $smh_lu -maxFileSize $smh_maxfilesize -numUnits $smh_numunits -datadir $smh_data_dir -fromFile $from -toFile $to/";
		qqx/tmux new -s $g -d $smh_postcli -provider $g -commitmentAtxId $smh_commitid -id $smh_id -labelsPerUnit $smh_lu -maxFileSize $smh_maxfilesize -numUnits $smh_numunits -datadir $smh_data_dir -fromFile $from -toFile $to/;
		sleep(1);
	    }
	}

	if ($smh_op ~~ "mining") {
	   if @plots.elems > 0 {
	      for @plots -> $p {

                  my $smh_data_dir          = "/" ~ $conf.mount_prefix ~ "/sd" ~ $d ~ "/" ~ $p;
		  if $($smh_data_dir.IO ~~ :e ) {
	      	     $num_nodes++;
		     my $postdata_metadata  = $smh_data_dir ~ '/postdata_metadata.json';
		     my $mining_numunits    = (qqx/cat $postdata_metadata | jq '.NumUnits'/).chomp;
		     my $mining_maxfilesize = (qqx/cat $postdata_metadata | jq '.MaxFileSize'/).chomp;
		     #my $mining_data_folder = $conf.smh_root_path ~ '/log/data_' ~ $d ~ '_' ~ $p;
		     my $mining_data_folder = $smh_log_dir ~ '/data_' ~ $p;
		     my $smh_filelock       = $smh_log_dir ~ '/filelock_' ~ $d ~ '_' ~ $p;
		     my $ip;
		     if ($file_index_or_ip ~~ 1) {		  
		     	$ip = @ips.pop ~ "";
		     } else {
		        $ip = $file_index_or_ip;
		     }
		     my $pub_listen = "$ip:9092";
		     my $pri_listen = "$ip:9093";
		     my $json_listen = "$ip:9094";
		     $sname                 = $d ~ '_' ~ $p ~ '_' ~ $ip;

		     say "tmux new -s $sname -d $smh --config $smh_conf  --data-folder $mining_data_folder --smeshing-opts-datadir $smh_data_dir --smeshing-opts-numunits $mining_numunits --smeshing-opts-maxfilesize $mining_maxfilesize --smeshing-coinbase $smh_coinbase --filelock $smh_filelock --grpc-public-listener $pub_listen --grpc-private-listener $pri_listen --grpc-json-listener $json_listen";
	             qqx/tmux new -s $sname -d $smh --config $smh_conf  --data-folder $mining_data_folder --smeshing-opts-datadir $smh_data_dir --smeshing-opts-numunits $mining_numunits --smeshing-opts-maxfilesize $mining_maxfilesize --smeshing-coinbase $smh_coinbase --filelock $smh_filelock --grpc-public-listener $pub_listen --grpc-private-listener $pri_listen --grpc-json-listener $json_listen/;
		     sleep(1);
		  }
	       }
	   }
	   say "num of nodes: $num_nodes";
	}
	
    }
}
