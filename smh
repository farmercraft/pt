#!/usr/bin/env rakudo

use lib 'lib';
use lib ".";
use Conf;
use plot;
use util;

sub MAIN($dirs, $gpu = "0", $task_per_gpu = 1)
{
    my $conf        = Conf.new;
    my @disks       = parse_comma($dirs);
    my $smh_op      = $conf.smh_op;
    my $num_of_disk = @disks.elems;

    my @gpus        = parse_comma($gpu);
    my $work_of_gpu = @gpus.elems;

    #my $num_of_gpu  = qqx/nvidia-smi -L | grep "GPU" | wc -l/;
    my $num_of_gpu  = $work_of_gpu;

    my $num_of_task = $num_of_disk;
    say "$smh_op mode";
    if ($smh_op ~~ "plot") {
       say " num_of_disk: $num_of_disk\n num_of_gpu: $num_of_gpu\n work_of_gpu: $work_of_gpu\n task_per_gpu: $task_per_gpu \n";
       if ($work_of_gpu > $num_of_gpu) {
	   say "error, the max num of gpu: $num_of_gpu";
	   exit(1);
       }

       my $max_of_task = min($num_of_disk, $work_of_gpu);
       my $pre_num_of_task = $work_of_gpu div $task_per_gpu;

       $num_of_task = min($max_of_task, $pre_num_of_task);
       say " num of task: $num_of_task";

       if ($num_of_task == 0) {
	  say " args erro";
	  exit(1);
       }
    }

    while ($num_of_task--) {
	my $p;
        my $gpu_cnt = $task_per_gpu;
	if ($smh_op ~~ "plot") {
	   $p = @gpus.pop;
	   while (--$gpu_cnt && $gpu_cnt>0) {
	       my $t = @gpus.pop;
	       $p = $p ~ ',' ~ $t;
	   }
	   say "\ntask of gpu id: $p";
	}
	

	my $d = @disks.pop;
	say "disk: $d";
	
	my $root_path = $conf.smh_root_path;
	my $smh             = $root_path ~ "/node/go-spacemesh";
	my $plots_dir       = $conf.plots_dir;
	my $smh_log_dir     = $conf.smh_root_path ~ '/log';
	my $smh_data_folder = $conf.smh_root_path ~ '/log/data_' ~ $d;
	my $smh_data_dir    = $conf.mount_prefix ~ "/sd" ~ $d ~ "/" ~ $plots_dir;
	my $smh_conf        = $conf.smh_root_path ~ '/node-config.json';
	my $smh_numunits    = $conf.smh_numunits;
	my $smh_filelock    = $smh_log_dir ~ '/filelock_' ~ $d;
	my $smh_coinbase    = $conf.smh_coinbase;

	my $smh_postcli     = $conf.smh_postcli;
	my $smh_lu          = $conf.smh_lu;
	my $smh_commitid    = $conf.smh_commitid;
	my $smh_id          = $conf.smh_id;
	my $smh_maxfilesize = $conf.smh_maxfilesize;
	#say $smh_filelock;
	#say $smh;
	say "plots dir: $plots_dir";
	say "data dir: $smh_data_dir";


	if ($smh_op ~~ "plot") {
	    loop (my $g = 0; $g < $num_of_gpu; $g++) {
		my $from = $g * ($smh_numunits * 32 div $num_of_gpu);
		my $to   = ($g + 1) * ($smh_numunits * 32 div $num_of_gpu) - 1;
		say "index: $g";
		say "from: $from";
		say "to: $to";
		say "qqx/tmux new -s $g -d $smh_postcli -provider $g -commitmentAtxId $smh_commitid -id $smh_id -labelsPerUnit $smh_lu -maxFileSize $smh_maxfilesize -numUnits $smh_numunits -datadir $smh_data_dir -fromFile $from -toFile $to/";
		qqx/tmux new -s $g -d $smh_postcli -provider $g -commitmentAtxId $smh_commitid -id $smh_id -labelsPerUnit $smh_lu -maxFileSize $smh_maxfilesize -numUnits $smh_numunits -datadir $smh_data_dir -fromFile $from -toFile $to/;
	    }
	}

	if ($smh_op ~~ "mining") {
	   say "qqx/tmux new -s $d -d $smh --config $smh_conf  --data-folder $smh_data_folder --smeshing-opts-datadir $smh_data_dir --smeshing-opts-numunits $smh_numunits --smeshing-opts-maxfilesize $smh_maxfilesize --smeshing-coinbase $smh_coinbase --filelock $smh_filelock /";
	   qqx/tmux new -s $d -d $smh --config $smh_conf  --data-folder $smh_data_folder --smeshing-opts-datadir $smh_data_dir --smeshing-opts-numunits $smh_numunits --smeshing-opts-maxfilesize $smh_maxfilesize --smeshing-coinbase $smh_coinbase --filelock $smh_filelock /;
	}
    }
}
